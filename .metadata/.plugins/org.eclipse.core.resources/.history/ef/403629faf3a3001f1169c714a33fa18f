package in.thiru.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;

import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;

public class RozarPayService {
	
	@Value("${razorpay.key.id}")
    private String razorpayKeyId;

    @Value("${razorpay.key.secret}")
    private String razorpayKeySecret;

    /**
     * Creates an order with Razorpay.
     * @param amountInPaise The amount in paise (100 paise = 1 INR)
     * @return The created Razorpay order object
     * @throws RazorpayException if there is an error in creating the order
     */
    public Order createOrder(int amountInPaise) throws RazorpayException {
        // Create a Razorpay client with API key and secret
        RazorpayClient client = new RazorpayClient(razorpayKeyId, razorpayKeySecret);

        // Create the order options
        Map<String, Object> options = new HashMap<>();
        options.put("amount", amountInPaise);  // Amount in paise
        options.put("currency", "INR");  // Currency in INR
        options.put("receipt", "txn123456");  // Unique receipt ID (can be customized)

        // Create an order with Razorpay
        Order order = client.orders.create(options);

        return order;  // Return the created order
    }

    /**
     * Verifies the payment signature sent by Razorpay after a successful transaction.
     * @param payload The Razorpay order ID and payment ID concatenated together
     * @param razorpaySignature The signature sent by Razorpay to verify
     * @return boolean Returns true if the signature is valid, false otherwise
     */
    public boolean verifyPaymentSignature(String payload, String razorpaySignature) {
        try {
            // Create a Razorpay client with API key and secret
            RazorpayClient client = new RazorpayClient(razorpayKeyId, razorpayKeySecret);

            // Use the Razorpay client to verify the payment signature
            return client.verifyPaymentSignature(payload, razorpaySignature);
        } catch (RazorpayException e) {
            // Print the error for debugging
            e.printStackTrace();
            return false;
        }
    }

}
